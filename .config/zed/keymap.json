// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: Open Default Keymap`
// from the command palette.
[
  {
    "context": "Workspace",
    "bindings": {
      "shift shift": "file_finder::Toggle",
      "alt-x": "command_palette::Toggle"
    }
  },
  {
    "context": "Editor && vim_mode == normal || ProjectPanel && not_editing || GitPanel",
    "bindings": {
      "space o": ["projects::OpenRecent", { "create_new_window": true }],
      "space w": null,
      "space w left": "workspace::ActivatePaneLeft",
      "space w right": "workspace::ActivatePaneRight",
      "space w up": "workspace::ActivatePaneUp",
      "space w down": "workspace::ActivatePaneDown",
      "space w h": "workspace::ActivatePaneLeft",
      "space w l": "workspace::ActivatePaneRight",
      "space w k": "workspace::ActivatePaneUp",
      "space w j": "workspace::ActivatePaneDown",
      "space w ctrl-h": "workspace::ActivatePaneLeft",
      "space w ctrl-l": "workspace::ActivatePaneRight",
      "space w ctrl-k": "workspace::ActivatePaneUp",
      "space w ctrl-j": "workspace::ActivatePaneDown",
      "space w shift-left": "workspace::SwapPaneLeft",
      "space w shift-right": "workspace::SwapPaneRight",
      "space w shift-up": "workspace::SwapPaneUp",
      "space w shift-down": "workspace::SwapPaneDown",
      "space w shift-h": "workspace::SwapPaneLeft",
      "space w shift-l": "workspace::SwapPaneRight",
      "space w shift-k": "workspace::SwapPaneUp",
      "space w shift-j": "workspace::SwapPaneDown",
      // "space w g t": "pane::ActivateNextItem",
      // "space w ctrl-g t": "pane::ActivateNextItem",
      // "space w g shift-t": "pane::ActivatePreviousItem",
      // "space w ctrl-g shift-t": "pane::ActivatePreviousItem",
      // "space w w": "workspace::ActivateNextPane",
      // "space w ": "git_panel::ToggleFocus",
      "space w w": "workspace::SaveAll",
      "space w ctrl-w": "workspace::ActivateNextPane",
      "space w p": "workspace::ActivatePreviousPane",
      "space w ctrl-p": "workspace::ActivatePreviousPane",
      "space w shift-w": "workspace::ActivatePreviousPane",
      "space w ctrl-shift-w": "workspace::ActivatePreviousPane",
      "space w e": "project_panel::ToggleFocus",
      "space w g": "git_panel::ToggleFocus",
      "space w t": "workspace::ToggleBottomDock",
      "space w i": "workspace::ToggleRightDock",
      "space w c": "workspace::CloseAllDocks",
      "space g c": "git::ExpandCommitEditor"
    }
  },
  {
    "context": "Editor",
    "bindings": {
      "ctrl-q": null,
      "ctrl-,": "editor::ShowSignatureHelp"
    }
  },
  {
    "context": "Editor && vim_mode == normal",
    "bindings": {
      "shift-h": "pane::ActivatePreviousItem",
      "shift-l": "pane::ActivateNextItem",
      "space w v": "pane::SplitLeft",
      "space w ctrl-v": "pane::SplitLeft",
      "space w s": "pane::SplitUp",
      "space w shift-s": "pane::SplitUp",
      "space w ctrl-s": "pane::SplitUp",
      // "space w q": "pane::CloseAllItems",
      "space w shift-q": "pane::ReopenClosedItem",
      "space w ctrl-q": "pane::CloseAllItems",
      "space w q": ["pane::CloseActiveItem", { "save_intent": "skip" }],
      "space w ctrl-o": "workspace::CloseInactiveTabsAndPanes",
      // "space w n": ["workspace::NewFileInDirection", "Up"],
      // "space w ctrl-n": ["workspace::NewFileInDirection", "Up"],
      "space w d": "editor::GoToDefinitionSplit",
      "space w g d": "editor::GoToDefinitionSplit",
      "space w shift-d": "editor::GoToTypeDefinitionSplit",
      "space w g shift-d": "editor::GoToTypeDefinitionSplit",
      "space w space": "editor::OpenExcerptsSplit",
      "space w g space": "editor::OpenExcerptsSplit",
      "space e o": "diagnostics::Deploy",
      "space e e": "diagnostics::Deploy",
      "] e": "editor::GoToDiagnostic",
      "[ e": "editor::GoToPreviousDiagnostic",
      "space k q": "vim::Rewrap"
    }
  },
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "a": "project_panel::NewFile",
      "i": "project_panel::NewFile"
    }
  },
  {
    "context": "Editor && showing_completions",
    "bindings": {
      "enter": "editor::ConfirmCompletion",
      "shift-enter": "editor::ConfirmCompletionReplace",
      "alt-l": "editor::ComposeCompletion",
      "tab": "editor::Tab"
    }
  },
  {
    "context": "Editor && edit_prediction",
    "bindings": {
      // This is identical to the binding in the base keymap, but the vim bindings above to
      // "vim::Tab" shadow it, so it needs to be bound again.
      "alt-l": "editor::AcceptEditPrediction",
      "tab": "editor::Tab"
    }
  }
]
